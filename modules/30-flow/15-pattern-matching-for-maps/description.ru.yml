---

name: Pattern matching for maps
theory: |

## pin operator

Переменная в шаблоне может выполнять две роли. Либо мы хотим, чтобы эта переменная получила новое значение, и тогда не важно, использовалась ли эта переменная раньше, было ли у нее какое-то значение. Либо мы хотим использовать значение, которое переменная уже имеет, как часть шаблона. Во втором случае понадобится pin operator.

```
iex(1)> animal = :cat
:cat
iex(2)> {^animal, "Tihon"} = {:cat, "Tihon"}
{:cat, "Tihon"}
iex(3)> {^animal, "Tihon"} = {:dog, "Tihon"}
** (MatchError) no match of right hand side value: {:dog, "Tihon"}
```

pin operator извлекает текущее значение переменной и подставляет его в шаблон. И дальше это значение в шаблоне работает как литерал.


## Pattern matching for maps

Есть некоторые нюансы при работе с map. (Есть нюансы не только с map, но с ними редко приходится сталкиваться, а с map часто).

В шаблоне не нужно перечислять все ключи, какие есть в map. Мы указываем только те ключи, которые нам нужны. 

```
iex(4)> my_map = %{a: 1, b: 2, c: 3}
%{a: 1, b: 2, c: 3}
iex(5)> %{a: value} = my_map  
%{a: 1, b: 2, c: 3}
iex(6)> value
1
```

Если ключи не являются атомами, то синтаксис отличается.
```
iex(7)> my_map = %{"a" => 1, "b" => 2, "c" => 3}
%{"a" => 1, "b" => 2, "c" => 3}
iex(8)> %{"a" => value1} = my_map
%{"a" => 1, "b" => 2, "c" => 3}
iex(9)> %{"a" => value1, "b" => value2} = my_map
%{"a" => 1, "b" => 2, "c" => 3}
iex(10)> value1
1
iex(11)> value2
2
```

Шаблон **%{}** совпадает с любой map. Это может быть контринтуитивно, кто-то может ожидать, что этот шаблон совпадает только с пустой map. По сути, такой шаблон проверяет, что значение является map, а не каким-то другим типом.

```
iex(13)> %{} = my_map 
%{"a" => 1, "b" => 2, "c" => 3}
```

Переменные можно использовать для извлечения значений, но не для ключей:
```
iex(15)> %{"c" => my_var} = my_map
%{"a" => 1, "b" => 2, "c" => 3}
iex(16)> my_var
3
iex(17)> %{my_var => 1} = my_map
** (CompileError) iex:17: cannot use variable my_var as map key inside a pattern.
```

А pin operator можно использовать и для ключа, и для значения:
```
iex(18)> value1
1
iex(19)> %{"a" => ^value1} = my_map
%{"a" => 1, "b" => 2, "c" => 3}
iex(20)> keyb = "b"
"b"
iex(21)> %{^keyb => _} = my_map
%{"a" => 1, "b" => 2, "c" => 3
```

instructions: |

  В разработке

tips: []
