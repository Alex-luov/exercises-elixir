---

name: Атомы и кортежи
theory: |

  *Атомы* типичны для функциональных языков, но редко встречаются в языках императивных. Это некие константные значения, которые можно сравнивать друг с другом. Собственно, сравнивать — это единственное, что с ними можно делать. Сами по себе они не очень полезны, но становятся полезны в комплекте с кортежами и сопоставлением с образцом (pattern matching).

  ```elixir
  :user
  :point
  :ip_address
  ```

  *Кортеж (tuple)* — это структура данных, объединяющая несколько разных значений. Кортеж похож на список, но в отличие от списка имеет фиксированную длину.

  ```elixir
  {"Bob", :male, 23}
  {1, 2}
  {127, 0, 0, 1}
  ```

  В кортежах на первой позиции часто ставят атом, чтобы обозначить, что за данные собраны в кортеже. Таким образом кортеж помечается тэгом (tagged tuple).

  ```elixir
  {:user, "Bob", :male, 23}
  {:point, 1, 2}
  {:ip_address, 127, 0, 0, 1}
  ```

  Кортежи могут быть вложенными:

  ```elixir
  {:rectangle, {:point, 0, 0}, {:point, 10, 10}}
  {:ip4, {127, 0, 0, 1}}
  ```

  Небольшие объекты, состоящие из 2-4 полей, удобно представлять в виде кортежей, если роль полей понятна из контекста. В ином случае нужно использовать *словарь (map)* или *структуру (struct)*.

  Атомы и кортежи — это легковесные объекты, они используют меньше памяти, чем словари и структуры, и операции над ними выполняются быстрее.

TODO pattern matching, извлечение значений
  {:point, x1, y1} = point1

TODO показать реализацию функции distance
  тут еще модуль :math из Эрланга, потому что Эликсировской обертки нет в стандартной библиотеке (есть в сторонних библиотеках).

  
instructions: |

  В разработке
реализовать функцию distance/2, которая вычисляет расстояние между двумя точками

Реализовать функцию is_point_inside_figure для прямоугольника и круга.


tips: []



### Atom, Tuple

 


